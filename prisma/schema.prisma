// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean       @default(false)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  integrations  Integration[]
  alerts        Alert[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Link to Integration metadata
  integration Integration?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id              String        @id @default(cuid())
  name            String
  slug            String?
  logo            String?
  createdAt       DateTime
  metadata        String?
  polarCustomerId String?
  subscription    Subscription?
  members         Member[]
  invitations     Invitation[]

  // Relations
  integrations   Integration[]
  tasks          Task[]
  transactions   Transaction[]
  metrics        Metric[]
  codeActivities CodeActivity[]
  alerts         Alert[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Subscription {
  id                          String    @id @default(cuid())
  createdAt                   DateTime  @default(now())
  modifiedAt                  DateTime?
  amount                      Int
  currency                    String
  recurringInterval           String
  status                      String
  currentPeriodStart          DateTime
  currentPeriodEnd            DateTime
  cancelAtPeriodEnd           Boolean   @default(false)
  canceledAt                  DateTime?
  startedAt                   DateTime
  endsAt                      DateTime?
  endedAt                     DateTime?
  customerId                  String
  subscriptionId              String?
  productId                   String
  discountId                  String?
  checkoutId                  String
  customerCancellationReason  String?
  customerCancellationComment String?
  metadata                    String? // JSON string
  customFieldData             String? // JSON string
  organizationId              String    @unique

  // Relation to Organization model
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  admin
  member
}

enum IntegrationStatus {
  active
  inactive
  error
  pending
}

enum IntegrationCategory {
  project_management
  payment
  analytics
  version_control
  communication
  crm
  other
}

enum TaskStatus {
  todo
  in_progress
  review
  done
  blocked
  cancelled
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum TransactionStatus {
  pending
  completed
  failed
  refunded
  cancelled
}

enum CodeActivityType {
  commit
  pull_request
  merge
  branch_created
  branch_deleted
  tag_created
  release
}

enum AlertType {
  task_overdue
  transaction_threshold
  metric_threshold
  code_activity
  integration_error
  custom
}

enum AlertChannel {
  email
  slack
  webhook
  in_app
}

// ============================================================================
// INTEGRATION METADATA
// ============================================================================

// Integration extends Account with SaaS-specific metadata
// The Account holds the OAuth tokens, this holds sync status and config
model Integration {
  id             String              @id @default(cuid())
  category       IntegrationCategory
  status         IntegrationStatus   @default(pending)
  config         Json? // Tool-specific configuration
  lastSyncAt     DateTime?
  lastSyncStatus String?
  errorMessage   String?
  syncEnabled    Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Multi-tenant field
  organizationId String
  userId         String?
  accountId      String  @unique // Links to BetterAuth Account

  // Relations
  User           User?          @relation(fields: [userId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  account        Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  tasks          Task[]
  transactions   Transaction[]
  metrics        Metric[]
  codeActivities CodeActivity[]

  @@index([organizationId])
  @@index([organizationId, status])
  @@index([organizationId, category])
  @@index([accountId])
}

// ============================================================================
// DATA ENTITIES
// ============================================================================

model Task {
  id          String       @id @default(cuid())
  externalId  String // ID from source system (e.g., JIRA-123)
  title       String
  description String?      @db.Text
  status      TaskStatus   @default(todo)
  priority    TaskPriority @default(medium)
  assignee    String? // Name or email of assignee
  assigneeId  String? // External assignee ID
  dueDate     DateTime?
  completedAt DateTime?
  sourceUrl   String? // Link to original task
  metadata    Json? // Additional source-specific data
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Multi-tenant fields
  organizationId String
  integrationId  String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  integration  Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, externalId])
  @@index([organizationId])
  @@index([integrationId])
  @@index([organizationId, status])
  @@index([organizationId, priority])
  @@index([organizationId, dueDate])
  @@index([assignee])
}

model Transaction {
  id            String            @id @default(cuid())
  externalId    String // ID from payment system
  amount        Decimal           @db.Decimal(19, 4)
  currency      String            @default("USD")
  status        TransactionStatus @default(pending)
  customerId    String?
  customerName  String?
  customerEmail String?
  description   String?
  sourceUrl     String?
  metadata      Json?
  processedAt   DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Multi-tenant fields
  organizationId String
  integrationId  String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  integration  Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, externalId])
  @@index([organizationId])
  @@index([integrationId])
  @@index([organizationId, status])
  @@index([organizationId, createdAt])
  @@index([customerId])
  @@index([customerEmail])
}

model Metric {
  id        String   @id @default(cuid())
  name      String // e.g., "response_time", "error_rate"
  value     Decimal  @db.Decimal(19, 4)
  unit      String? // e.g., "ms", "percent", "count"
  category  String // e.g., "performance", "business", "custom"
  timestamp DateTime
  metadata  Json? // Additional context
  createdAt DateTime @default(now())

  // Multi-tenant fields
  organizationId String
  integrationId  String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  integration  Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([integrationId])
  @@index([organizationId, name])
  @@index([organizationId, category])
  @@index([organizationId, timestamp])
  @@index([name, timestamp])
}

model CodeActivity {
  id          String           @id @default(cuid())
  externalId  String // Commit SHA, PR number, etc.
  type        CodeActivityType
  author      String
  authorEmail String?
  repository  String
  branch      String?
  message     String?          @db.Text
  additions   Int?
  deletions   Int?
  sourceUrl   String?
  metadata    Json?
  occurredAt  DateTime // When the activity happened in the source
  createdAt   DateTime         @default(now())

  // Multi-tenant fields
  organizationId String
  integrationId  String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  integration  Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@unique([integrationId, externalId])
  @@index([organizationId])
  @@index([integrationId])
  @@index([organizationId, type])
  @@index([organizationId, occurredAt])
  @@index([author])
  @@index([repository])
}

// ============================================================================
// ALERTING SYSTEM
// ============================================================================

model Alert {
  id              String         @id @default(cuid())
  name            String
  type            AlertType
  description     String?
  threshold       Decimal?       @db.Decimal(19, 4)
  condition       Json // Complex condition rules
  channels        AlertChannel[]
  isActive        Boolean        @default(true)
  lastTriggeredAt DateTime?
  triggerCount    Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Multi-tenant fields
  organizationId String
  userId         String // User who created the alert

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs         AlertLog[]

  @@index([organizationId])
  @@index([userId])
  @@index([organizationId, isActive])
  @@index([organizationId, type])
}

model AlertLog {
  id        String   @id @default(cuid())
  alertId   String
  triggered Boolean
  message   String   @db.Text
  data      Json?
  createdAt DateTime @default(now())

  // Relations
  alert Alert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId])
  @@index([alertId, createdAt])
  @@index([triggered, createdAt])
}

model CDMRecentSearches {
  id        String   @id @default(cuid())
  userId    String
  query     String   @db.Text
  createdAt DateTime @default(now())

  // Relation to users table (if you have a User model)
  // user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, query])
  @@index([userId, createdAt(sort: Desc)])
}
