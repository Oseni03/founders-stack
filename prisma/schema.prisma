// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean       @default(false)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  integrations  Integration[]
  OAuthTemp     OAuthTemp[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([userId, providerId])
  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id              String        @id @default(cuid())
  name            String
  slug            String?
  logo            String?
  createdAt       DateTime
  metadata        String?
  polarCustomerId String?
  subscription    Subscription?
  members         Member[]
  invitations     Invitation[]

  // Relations
  integrations         Integration[] // Connected tools
  tasks                Task[]
  deploymentEvents     DeploymentEvent[]
  analytics            AnalyticsEvent[]
  customers            Customer[]
  repositories         Repository[]
  commits              Commit[]
  pullRequests         PullRequest[]
  issues               Issue[]
  branches             Branch[]
  repositoryHealths    RepositoryHealth[]
  contributors         Contributor[]
  projects             Project[]
  financeSubscriptions FinanceSubscription[]
  invoices             Invoice[]
  balance              Balance[]
  events               Event[]
  messages             Message[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Subscription {
  id                          String    @id @default(cuid())
  createdAt                   DateTime  @default(now())
  modifiedAt                  DateTime?
  amount                      Int
  currency                    String
  recurringInterval           String
  status                      String
  currentPeriodStart          DateTime
  currentPeriodEnd            DateTime
  cancelAtPeriodEnd           Boolean   @default(false)
  canceledAt                  DateTime?
  startedAt                   DateTime
  endsAt                      DateTime?
  endedAt                     DateTime?
  customerId                  String
  subscriptionId              String?
  productId                   String
  discountId                  String?
  checkoutId                  String
  customerCancellationReason  String?
  customerCancellationComment String?
  metadata                    String? // JSON string
  customFieldData             String? // JSON string
  organizationId              String    @unique

  // Relation to Organization model
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

enum IntegrationCategory {
  PAYMENT           // Stripe, PayPal, Square, etc.
  ANALYTICS         // Mixpanel, Amplitude, Google Analytics
  CRM               // HubSpot, Salesforce, Pipedrive
  SUPPORT           // Zendesk, Intercom, Freshdesk
  PROJECT_MGMT      // Asana, Trello, Jira, Linear
  COMMUNICATION     // Slack, Discord, Microsoft Teams
  EMAIL_MARKETING   // Mailchimp, SendGrid, ActiveCampaign
  DEVELOPMENT       // GitHub, GitLab, CircleCI
  ACCOUNTING        // QuickBooks, Xero, Wave
  SOCIAL_MEDIA      // Buffer, Hootsuite, Later
  SEO               // Ahrefs, SEMrush
  FEEDBACK          // Typeform, SurveyMonkey
  SCHEDULING        // Calendly, Cal.com
  DEVOPS            // Datadog, Sentry
  AI                // OpenAI, Anthropic
  OTHER
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  PENDING_SETUP     // Waiting for user to complete webhook setup
  SYNCING
}

enum TaskStatus {
  open
  in_progress
  done
}

enum IntegrationType {
  oauth1a
  oauth2
  api_key
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum WebhookSetupType {
  AUTOMATIC // App creates webhook via API
  MANUAL // User must configure in platform
  HYBRID // Combination of both
}

model Integration {
  id             String              @id @default(cuid())
  category       IntegrationCategory
  status         IntegrationStatus   @default(PENDING_SETUP)
  lastSyncAt     DateTime?
  toolName       String // e.g., "stripe", "jira"
  displayName    String?
  type           IntegrationType     @default(oauth2)
  lastSyncStatus String?
  syncInterval   Int? // Minutes, e.g., 15
  attributes     Json?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // OAuth & API Credentials (encrypted)
  accessToken    String? // Encrypted OAuth access token
  refreshToken   String? // Encrypted OAuth refresh token
  tokenExpiresAt DateTime?
  apiKey         String? // Encrypted API key (for non-OAuth)
  apiSecret      String? // Encrypted API secret
  webhookSecret  String? // For webhook signature verification

  // Webhook Configuration
  webhookUrl       String? // The webhook URL we provide to user
  webhookId        String? // Platform's webhook ID (if created via API)
  webhookEvents    String[] // Events subscribed to
  webhookSetupType WebhookSetupType @default(AUTOMATIC)
  webhookConfirmed Boolean  @default(false)  // For MANUAL webhook Configuration

  // Platform-specific metadata
  metadata Json? // Store platform-specific IDs, settings

  // Multi-tenant field
  organizationId String

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?

  @@unique([organizationId, toolName])
  @@index([organizationId, status])
  @@index([organizationId, category])
}

model OAuthTemp {
  id               String   @id @default(cuid())
  userId           String
  provider         String
  oauthToken       String?
  oauthTokenSecret String?
  state            String?
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId, provider])
  @@map("oauth_temp")
}

model Project {
  id             String  @id @default(cuid())
  organizationId String
  name           String
  description    String?
  externalId     String? // External PM tool project/board ID (e.g., Asana project ID)
  sourceTool     String? // e.g., "jira", "asana" if linked to one tool
  attributes     Json? // Tool-specific: { boardId: string, workspaceId: string }, Slack-specific metadata (e.g., { is_private: boolean, num_members: number })
  status         String  @default("active") // e.g., "active", "archived"

  organization Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks        Task[]
  messages     Message[]
  analytics    AnalyticsEvent[]
  feeds        Feed[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, status])
}

// Asana task, Jira issue, Linear issue, GitHub issue
model Task {
  id             String        @id @default(cuid())
  organizationId String
  projectId      String // Link to Project (parent board/project)
  externalId     String // From source tool
  sourceTool     String // e.g., "jira", "asana"
  title          String
  description    String?
  status         TaskStatus // Normalized: "open", "in_progress", "done"
  assignee       String? //  Assignee name
  assigneeId     String? // External assignee ID
  priority       TaskPriority?
  url            String? // Tool-specific URL
  dueDate        DateTime?
  labels         String[]
  attributes     Json? // Tool-specific: { listId: string, pos: number, desc: string }

  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deploymentEvents DeploymentEvent[]
  feeds            Feed[]

  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, status, priority])
  @@index([organizationId, projectId, status])
  @@index([assigneeId, dueDate])
}

// Communication Category
model Message {
  id             String   @id @default(uuid())
  externalId     String
  text           String // Message content
  user           String? // Slack user ID/name
  channelId      String // References Channel.id
  sourceTool     String // e.g., "slack"
  organizationId String // Links to organization
  timestamp      DateTime
  attributes     Json? // Slack-specific metadata (e.g., { thread_ts: string, reactions: array })
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  channel      Project      @relation(fields: [channelId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([externalId, sourceTool])
  @@index([externalId, sourceTool, organizationId]) // Optimize lookups
  @@index([channelId]) // Optimize message queries by channel
}

// Enum for Feedback severity levels (extensible for future refinements)
enum Severity {
  Low
  Medium
  High
}

// Enum for sentiment analysis (derived from NLP in integration engine)
enum Sentiment {
  Positive
  Negative
  Neutral
}

// Enum for resolution status (tracks triage progress)
enum Status {
  Open
  InProgress
  Resolved
}

model Feed {
  id             String   @id @default(cuid())
  organizationId String
  externalId     String
  sourceTool     String // e.g., "github"
  title          String // Raw feedback text (e.g., "App crashes on login")
  description    String?
  author         String?
  authorId       String?
  owner          String?
  ownerId        String?
  category       String?
  url            String?
  tags           String[]
  score          Int?
  commentsCount  Int?
  status         String // Tracks status
  attributes     Json? // Flexible JSONB for extras like customer info
  projectId      String // Required relation to Project (board)
  taskId         String? // Optional link to a Task for triage

  //  severity       Severity  @default(Medium) // Enum for prioritization
  //  sentiment      Sentiment @default(Neutral) // Derived from integration

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade) // Delete feedback if project deleted
  task    Task?   @relation(fields: [taskId], references: [id]) // Optional triage link
  //  @@index([severity])

  @@unique([externalId, sourceTool])
  @@index([organizationId])
  @@index([projectId])
  @@index([status])
}

// Code/CI Category
model DeploymentEvent {
  id              String    @id @default(cuid())
  organizationId  String
  externalId      String
  sourceTool      String // e.g., "github"
  commitHash      String?
  status          String // e.g., "success"
  environment     String? // e.g., "prod"
  errorLogSummary String?
  buildDuration   Int? // Seconds
  deployedAt      DateTime?
  relatedTaskId   String? // Link to Task
  attributes      Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  relatedTask  Task?        @relation(fields: [relatedTaskId], references: [id])

  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Commit       Commit?   @relation(fields: [commitId], references: [id])
  commitId     String?

  @@unique([externalId, sourceTool])
  @@index([organizationId, status])
  @@index([externalId, sourceTool])
}

// Supporting Entity for Finance (Customers)
model Customer {
  id             String   @id @default(cuid())
  organizationId String
  externalId     String
  sourceTool     String // e.g., 'stripe'
  email          String
  name           String?
  createdAt      DateTime
  metadata       Json?

  subscriptions FinanceSubscription[]
  invoices      Invoice[]
  organization  Organization          @relation(fields: [organizationId], references: [id])

  @@unique([externalId, sourceTool])
  @@index([organizationId])
}

model FinanceSubscription {
  id              String    @id @default(cuid())
  organizationId  String
  externalId      String
  sourceTool      String // e.g., 'stripe'
  customerId      String
  planId          String
  status          String
  amount          Float
  billingCycle    String
  startDate       DateTime
  endDate         DateTime?
  nextBillingDate DateTime?
  metadata        Json?

  customer     Customer     @relation(fields: [customerId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([externalId, sourceTool])
  @@index([organizationId, customerId])
}

model Invoice {
  id              String    @id @default(cuid())
  organizationId  String
  externalId      String
  sourceTool      String // e.g., 'stripe'
  customerId      String
  subscriptionId  String?
  amountDue       Float
  amountPaid      Float
  amountRemaining Float
  status          String
  issuedDate      DateTime
  dueDate         DateTime?
  pdfUrl          String?
  metadata        Json?

  customer     Customer     @relation(fields: [customerId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([externalId, sourceTool])
  @@index([organizationId, customerId, subscriptionId])
}

model Balance {
  id              String   @id @default(cuid())
  organizationId  String
  externalId      String? // Nullable, as Stripe Balance has no ID
  sourceTool      String // e.g., 'stripe'
  currency        String
  availableAmount Float
  pendingAmount   Float
  updatedAt       DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, sourceTool])
  @@index([organizationId])
}

model Event {
  id             String       @id @default(cuid())
  organizationId String
  externalId     String
  sourceTool     String
  type           String
  category       String
  status         String       @default("pending")
  data           Json
  previousData   Json?
  processedAt    DateTime?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([externalId, sourceTool])
  @@index([organizationId, type, status])
  @@index([createdAt])
}

// Analytics Category
model AnalyticsEvent {
  id                    String  @id @default(cuid())
  sourceTool            String // e.g., "postHog", "amplitude", "google-analytics"
  organizationId        String
  externalId            String
  eventType             String? // e.g., "$pageview", "funnel_completed", "custom_event"
  referrer              String?
  referringDomain       String?
  timezone              String?
  pathname              String?
  deviceType            String?
  browserLanguagePrefix String?
  geoipCityName         String?
  geoipCountryName      String?
  geoipCountryCode      String?
  geoipContinentName    String?
  geoipContinentCode    String?
  duration              Float? // New: For $pageleave duration (seconds)

  attributes Json?
  timestamp  DateTime

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@unique([organizationId])
  @@unique([externalId, sourceTool])
  @@index([externalId, sourceTool])
}

model Repository {
  id             String  @id @default(cuid())
  organizationId String
  name           String
  owner          String
  externalId     String
  sourceTool     String // e.g., "github"
  attributes     Json?
  fullName       String? // e.g., "facebook/react" - used for display/search
  description    String? @db.Text // Already there, good!
  isPrivate      Boolean @default(false) // Privacy is critical info
  defaultBranch  String? // e.g., "main" - needed for git operations
  language       String? // Primary language - useful for filtering
  isArchived     Boolean @default(false) // Status field

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  commits      Commit[]
  pullRequests PullRequest[]
  issues       Issue[]
  branches     Branch[]

  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  health       RepositoryHealth?
  contributors Contributor[]

  @@unique([externalId, sourceTool])
  @@index([organizationId, name])
  @@index([externalId, sourceTool])
}

model Commit {
  id             String   @id @default(cuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  authorName     String?
  committerName  String?
  avatarUrl      String?
  additions      Int? // Stats
  deletions      Int? // Stats
  total          Int? // Stats
  committedAt    DateTime
  message        String
  url            String?
  sha            String?  @db.VarChar(40) // Git SHA - used for lookups
  branch         String? // Which branch - useful for filtering
  authorEmail    String? // Contact info
  attributes     Json?

  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository       Repository        @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  deploymentEvents DeploymentEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, committedAt])
  @@index([externalId, sourceTool])
}

model PullRequest {
  id             String    @id @default(cuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  title          String
  status         String // e.g., "open", "merged", "draft"
  reviewStatus   String? // e.g., "awaiting_review"
  mergedAt       DateTime?
  authorId       String? // Link to User
  reviewerIds    String[] // Array of reviewer IDs
  avgReviewTime  Float? // Hours
  number         Int // PR number - used in references/links
  url            String? // Direct link
  baseBranch     String? // Target branch
  headBranch     String? // Source branch
  isDraft        Boolean   @default(false) // Status indicator
  closedAt       DateTime? // Lifecycle tracking
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, status])
  @@index([externalId, sourceTool])
}

model Issue {
  id             String    @id @default(cuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  title          String
  status         String // e.g., "open", "closed"
  authorId       String? // Link to User
  number         Int // Issue number - used in references
  url            String? // Direct link
  body           String?   @db.Text // Issue description
  labels         String[] // Frequently filtered by labels
  assigneeIds    String[] // Who's working on it
  commentsCount  Int       @default(0) // Activity indicator
  closedAt       DateTime? // Resolution tracking
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, status])
  @@index([externalId, sourceTool])
}

model Branch {
  id             String    @id @default(cuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  name           String
  lastCommitAt   DateTime?
  status         String // e.g., "active", "stale"
  commitsAhead   Int       @default(0)
  commitsBehind  Int       @default(0)
  sha            String?   @db.VarChar(40) // Latest commit SHA
  isProtected    Boolean   @default(false) // Branch protection
  createdBy      String? // Creator username
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, name])
  @@index([externalId, sourceTool])
}

// Contributor model
model Contributor {
  id                String    @id @default(cuid())
  organizationId    String
  repositoryId      String
  externalId        String // GitHub user ID
  sourceTool        String // e.g., "github"
  login             String // GitHub username
  contributions     Int       @default(0) // Number of contributions (e.g., commits, PRs)
  name              String? // Display name
  email             String? // Contact info
  avatarUrl         String? // Profile picture
  lastContributedAt DateTime? // Activity tracking
  attributes        Json? // Flexible tool-specific data (e.g., avatar URL)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, login])
  @@map("contributor")
}

model RepositoryHealth {
  id             String   @id @default(cuid())
  organizationId String
  repositoryId   String   @unique
  healthScore    Int      @default(0) // 0-100 scale
  openIssues     Int      @default(0)
  stalePrs       Int      @default(0)
  avgReviewTime  Float? // Hours
  testCoverage   Float? // Percentage
  updatedAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([organizationId, repositoryId])
  @@index([organizationId, repositoryId])
}

model CDMRecentSearches {
  id        String   @id @default(cuid())
  userId    String
  query     String   @db.Text
  createdAt DateTime @default(now())

  // Relation to users table (if you have a User model)
  // user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, query])
  @@index([userId, createdAt(sort: Desc)])
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique

  // Onboarding progress
  onboardingCompleted Boolean @default(false)
  onboardingProgress  Json?   @db.JsonB

  // User settings
  theme                String  @default("system") @db.VarChar(50)
  notificationsEnabled Boolean @default(true)
  emailNotifications   Boolean @default(true)
  slackNotifications   Boolean @default(false)

  // Dashboard preferences
  defaultDashboardView String @default("overview") @db.VarChar(100)
  dashboardLayout      Json?  @db.JsonB

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Relation to users table (if you have a User model)
  // user       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([onboardingCompleted])
}
