// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean       @default(false)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  integrations  Integration[]
  alerts        Alert[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Link to Integration metadata
  integration Integration?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id              String        @id @default(cuid())
  name            String
  slug            String?
  logo            String?
  createdAt       DateTime
  metadata        String?
  polarCustomerId String?
  subscription    Subscription?
  members         Member[]
  invitations     Invitation[]

  // Relations
  integrations     Integration[] // Connected tools
  tasks            Task[]
  messageThreads   MessageThread[]
  deploymentEvents DeploymentEvent[]
  transactions     Transaction[]
  userReports      UserReport[]
  customers        Customer[]
  alerts           Alert[]
  Repository       Repository[]
  Commit           Commit[]
  PullRequest      PullRequest[]
  Issue            Issue[]
  Branch           Branch[]
  RepositoryHealth RepositoryHealth[]
  Contributor      Contributor[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Subscription {
  id                          String    @id @default(cuid())
  createdAt                   DateTime  @default(now())
  modifiedAt                  DateTime?
  amount                      Int
  currency                    String
  recurringInterval           String
  status                      String
  currentPeriodStart          DateTime
  currentPeriodEnd            DateTime
  cancelAtPeriodEnd           Boolean   @default(false)
  canceledAt                  DateTime?
  startedAt                   DateTime
  endsAt                      DateTime?
  endedAt                     DateTime?
  customerId                  String
  subscriptionId              String?
  productId                   String
  discountId                  String?
  checkoutId                  String
  customerCancellationReason  String?
  customerCancellationComment String?
  metadata                    String? // JSON string
  customFieldData             String? // JSON string
  organizationId              String    @unique

  // Relation to Organization model
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

enum IntegrationStatus {
  active
  inactive
  error
  pending
}

enum IntegrationCategory {
  project_management
  payment
  analytics
  version_control
  communication
  crm
  other
}

enum TaskStatus {
  open
  closed
}

enum IntegrationType {
  oauth
  api_key
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum TransactionStatus {
  pending
  completed
  failed
  refunded
  cancelled
}

model Integration {
  id             String              @id @default(cuid())
  category       IntegrationCategory
  status         IntegrationStatus   @default(pending)
  lastSyncAt     DateTime?
  toolName       String // e.g., "stripe", "jira"
  type           IntegrationType // e.g., "oauth", "api_key"
  lastSyncStatus String?
  syncInterval   Int? // Minutes, e.g., 15
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  // Multi-tenant field
  organizationId String
  accountId      String @unique // Links to BetterAuth Account

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  account      Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?

  @@index([organizationId, toolName])
  @@index([organizationId, status])
  @@index([organizationId, category])
  @@index([accountId])
}

// Project/Task Category
model Task {
  id              String        @id @default(uuid())
  organizationId  String
  externalId      String // From source tool
  sourceTool      String // e.g., "jira"
  status          TaskStatus // e.g., "open", "closed"
  assigneeId      String? // Unified user ID or external string
  priority        TaskPriority? // e.g., "P1"
  parentProjectId String? // Link to parent (if hierarchical)
  externalLink    String?
  dueDate         DateTime?
  labels          String[] // Array for tags
  attributes      Json? // Flexible tool-specific data (JSONB)
  relatedTaskId   String? // Self-relation for threads/hierarchy

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  // relatedTask    Task?     @relation("TaskRelations", fields: [relatedTaskId], references: [id])

  lastSyncedAt    DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MessageThread   MessageThread[]
  DeploymentEvent DeploymentEvent[]

  @@unique([externalId, sourceTool])
  @@index([organizationId, status, priority])
  @@index([externalId, sourceTool])
}

// Communication Category
model MessageThread {
  id                   String    @id @default(uuid())
  organizationId       String
  externalId           String
  sourceTool           String // e.g., "slack"
  participants         String[] // Array of user IDs/emails
  relatedTaskId        String? // Link to Task
  lastMessageTimestamp DateTime?
  unreadCount          Int       @default(0)
  sentimentScore       Float? // Derived from NLP
  attributes           Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  relatedTask  Task?        @relation(fields: [relatedTaskId], references: [id])

  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, relatedTaskId])
  @@index([externalId, sourceTool])
}

// Code/CI Category
model DeploymentEvent {
  id              String    @id @default(uuid())
  organizationId  String
  externalId      String
  sourceTool      String // e.g., "github"
  commitHash      String?
  status          String // e.g., "success"
  environment     String? // e.g., "prod"
  errorLogSummary String?
  buildDuration   Int? // Seconds
  deployedAt      DateTime?
  relatedTaskId   String? // Link to Task
  attributes      Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  relatedTask  Task?        @relation(fields: [relatedTaskId], references: [id])

  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Commit       Commit?   @relation(fields: [commitId], references: [id])
  commitId     String?

  @@unique([externalId, sourceTool])
  @@index([organizationId, status])
  @@index([externalId, sourceTool])
}

// Finance Category
model Transaction {
  id             String            @id @default(uuid())
  organizationId String
  externalId     String
  sourceTool     String // e.g., "stripe"
  amount         Float
  type           String // e.g., "subscription"
  customerId     String? // Link to Customer
  status         TransactionStatus
  date           DateTime
  currency       String            @default("USD")
  refundReason   String?
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customer     Customer?    @relation(fields: [customerId], references: [id])

  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, date, status])
  @@index([externalId, sourceTool])
}

// Supporting Entity for Finance (Customers)
model Customer {
  id             String  @id @default(uuid())
  organizationId String
  externalId     String
  sourceTool     String
  name           String?
  email          String?
  planTier       String? // e.g., "basic"
  attributes     Json?

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, email])
  @@index([externalId, sourceTool])
}

// Feedback/Analytics Category
model UserReport {
  id             String  @id @default(uuid())
  organizationId String
  externalId     String
  sourceTool     String // e.g., "zendesk"
  severity       String? // e.g., "high"
  sourceUrl      String?
  sentiment      String? // e.g., "negative"
  userMetadata   Json? // e.g., { "planTier": "pro" }
  pageViews      Int? // For analytics
  conversionRate Float? // Derived
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, sentiment])
  @@index([externalId, sourceTool])
}

// Alerts System (For Phase 2: Configurable notifications)
model Alert {
  id                String  @id @default(uuid())
  organizationId    String
  type              String // e.g., "churn_threshold"
  threshold         Float? // e.g., 5% churn
  status            String // e.g., "triggered"
  message           String
  relatedEntityId   String? // Generic link to Task/Transaction ID
  relatedEntityType String? // e.g., "Task"

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([organizationId, type])
}

model Repository {
  id             String @id @default(uuid())
  organizationId String
  name           String
  owner          String
  externalId     String
  sourceTool     String // e.g., "github"
  attributes     Json?

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  commits      Commit[]
  pullRequests PullRequest[]
  issues       Issue[]
  branches     Branch[]

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  health           RepositoryHealth?
  contributors     Contributor[]

  @@unique([externalId, sourceTool])
  @@index([organizationId, name])
  @@index([externalId, sourceTool])
}

model Commit {
  id             String   @id @default(uuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  authorId       String? // Link to User or external author
  committedAt    DateTime
  message        String
  attributes     Json?

  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository       Repository        @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  deploymentEvents DeploymentEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, committedAt])
  @@index([externalId, sourceTool])
}

model PullRequest {
  id             String    @id @default(uuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  title          String
  status         String // e.g., "open", "merged", "draft"
  reviewStatus   String? // e.g., "awaiting_review"
  mergedAt       DateTime?
  authorId       String? // Link to User
  reviewerIds    String[] // Array of reviewer IDs
  avgReviewTime  Float? // Hours
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, status])
  @@index([externalId, sourceTool])
}

model Issue {
  id             String  @id @default(uuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  title          String
  status         String // e.g., "open", "closed"
  authorId       String? // Link to User
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, status])
  @@index([externalId, sourceTool])
}

model Branch {
  id             String    @id @default(uuid())
  organizationId String
  repositoryId   String
  externalId     String
  sourceTool     String // e.g., "github"
  name           String
  lastCommitAt   DateTime?
  status         String // e.g., "active", "stale"
  commitsAhead   Int       @default(0)
  attributes     Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, name])
  @@index([externalId, sourceTool])
}

// Contributor model
model Contributor {
  id             String @id @default(uuid())
  organizationId String
  repositoryId   String
  externalId     String // GitHub user ID
  sourceTool     String // e.g., "github"
  login          String // GitHub username
  contributions  Int    @default(0) // Number of contributions (e.g., commits, PRs)
  attributes     Json? // Flexible tool-specific data (e.g., avatar URL)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([externalId, sourceTool])
  @@index([organizationId, login])
  @@map("contributor")
}

model RepositoryHealth {
  id             String   @id @default(uuid())
  organizationId String
  repositoryId   String   @unique
  healthScore    Int      @default(0) // 0-100 scale
  openIssues     Int      @default(0)
  stalePrs       Int      @default(0)
  avgReviewTime  Float? // Hours
  testCoverage   Float? // Percentage
  updatedAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  repository   Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([organizationId, repositoryId])
  @@index([organizationId, repositoryId])
}

model CDMRecentSearches {
  id        String   @id @default(cuid())
  userId    String
  query     String   @db.Text
  createdAt DateTime @default(now())

  // Relation to users table (if you have a User model)
  // user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, query])
  @@index([userId, createdAt(sort: Desc)])
}

model UserPreferences {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @unique @db.Uuid

  // Onboarding progress
  onboardingCompleted Boolean @default(false)
  onboardingProgress  Json?   @db.JsonB

  // User settings
  theme                String  @default("system") @db.VarChar(50)
  notificationsEnabled Boolean @default(true)
  emailNotifications   Boolean @default(true)
  slackNotifications   Boolean @default(false)

  // Dashboard preferences
  defaultDashboardView String @default("overview") @db.VarChar(100)
  dashboardLayout      Json?  @db.JsonB

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)

  // Relation to users table (if you have a User model)
  // user       users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([onboardingCompleted])
}
