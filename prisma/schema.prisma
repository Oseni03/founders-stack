// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id  @default(cuid())
  name          String
  email         String
  emailVerified Boolean      @default(false)
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  Notes         Note[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id              String        @id  @default(cuid())
  name            String
  slug            String?
  logo            String?
  createdAt       DateTime
  metadata        String?
  polarCustomerId String?
  subscription    Subscription?
  members         Member[]
  Notes           Note[]
  invitations     Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id  @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())

  @@map("member")
}

model Invitation {
  id             String       @id  @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  tenantId  String
  tags      String[]
  isPublic  Boolean
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                          String    @id @default(cuid())
  createdAt                   DateTime  @default(now())
  modifiedAt                  DateTime?
  amount                      Int
  currency                    String
  recurringInterval           String
  status                      String
  currentPeriodStart          DateTime
  currentPeriodEnd            DateTime
  cancelAtPeriodEnd           Boolean   @default(false)
  canceledAt                  DateTime?
  startedAt                   DateTime
  endsAt                      DateTime?
  endedAt                     DateTime?
  customerId                  String
  subscriptionId              String?
  productId                   String
  discountId                  String?
  checkoutId                  String
  customerCancellationReason  String?
  customerCancellationComment String?
  metadata                    String? // JSON string
  customFieldData             String? // JSON string
  maxUsers                    Int      @default(3)
  maxNotes                    Int      @default(50)
  organizationId              String    @unique

  // Relation to Organization model
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscription")
}
